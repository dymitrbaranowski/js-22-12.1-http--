{"mappings":"AA0FS,IAAIA,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAASC,KAAKC,SAAW,GAE/BC,YAAW,KACLH,GACFF,EAAQ,kBAEEC,EAAL,gCAA2D,GATxD,IAUH,IAIQK,MAErB,SAA4BC,GAC1BC,QAAQC,IAAI,sBACZD,QAAQC,IAAIF,E,IAJgCG,OAO9C,SAA0BC,GACxBH,QAAQC,IAAI,oBACZD,QAAQC,IAAIE,E","sources":["src/js/01-promise-api.js"],"sourcesContent":["/*\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 1000);\n// });\n\n// promise.then(onFullFilled, onRejected);\n\n// function onFullFilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n// promise\n//   .then(onFullFilled)\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду выполнен в любом случаe'));\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 1000);\n// });\n\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Я буду выполнен в любом случае'));\n\nconst makeOrder = dish => {\n  const DELAY = 1000;\n\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n\n    setTimeout(() => {\n      if (passed) {\n        resolve('вот ваше блюдо');\n      }\n      reject('Извините закончились продукты');\n    }, DELAY);\n  });\n};\n\nmakeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\nfunction onMakeOrderSuccess(result) {\n  console.log('onMakeOrderSuccess');\n  console.log(result);\n}\n\nfunction onMakeOrderError(error) {\n  console.log('onMakeOrderError');\n  console.log(error);\n}\n"],"names":["Promise","resolve","reject","passed","Math","random","setTimeout","then","result","console","log","catch","error"],"version":3,"file":"01-promise-api.39020a82.js.map"}